# Before this deployment, ensure that MongoDB has been created using Helm.
apiVersion: v1
kind: Service
metadata:
  name: ratings-api
  namespace: ratingsapp
spec:
  selector:
    app: ratings-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
---  
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: {{ .Env.AZURE_APP_MSI }}
    azure.workload.identity/tenant-id: {{ .Env.AZURE_TENANT_ID }}
  labels:
    azure.workload.identity/use: "true"
  name: workload-sa
  namespace: ratingsapp
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: mongo-secret-csi
  namespace: ratingsapp
spec:
  provider: azure
  parameters:
    clientID: {{ .Env.AZURE_APP_MSI }}
    keyvaultName: {{ .Env.AZURE_KEY_VAULT_NAME }}
    objects: |
      array:
        - |
          objectName: mongodburi
          objectType: secret
    tenantId: {{ .Env.AZURE_TENANT_ID }}
  secretObjects:
  - data:
    - key: MONGODBURI
      objectName: mongodburi
    secretName: mongodburi
    type: Opaque
---    
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratings-api
  namespace: ratingsapp
spec:
  selector:
    matchLabels:
      app: ratings-api
  template:
    metadata:
      labels:
        app: ratings-api # the label for the pods and the deployments
    spec:
      serviceAccountName: workload-sa
      containers:
      - name: ratings-api
        image: {{ .Env.SERVICE_API_IMAGE_NAME }}
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true        
        ports:
        - containerPort: 3000 # the application listens to this port
        env:
        - name: MONGODB_URI # the application expects to find the MongoDB connection details in this environment variable
          valueFrom:
            secretKeyRef:
              name: mongodburi # secret name in keyvault and secret provider class
              key: MONGODBURI # key name in secret provider class
        resources:
          requests: # minimum resources required
            cpu: 250m
            memory: 64Mi
          limits: # maximum resources allocated
            cpu: 250m
            memory: 256Mi
        readinessProbe: # is the container ready to receive traffic?
          initialDelaySeconds: 10
          httpGet:
            port: 3000
            path: /healthz
        livenessProbe: # is the container healthy?
          initialDelaySeconds: 2
          periodSeconds: 5
          httpGet:
            port: 3000
            path: /healthz
      volumes:
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "mongo-secret-csi"            
